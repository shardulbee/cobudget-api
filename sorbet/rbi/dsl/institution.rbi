# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Institution`.
# Please instead update this file by running `bin/tapioca dsl Institution`.

# typed: false
class Institution
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def account_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def account_ids=(ids); end

    sig { returns(::ActiveRecord::Associations::CollectionProxy[Account]) }
    def accounts; end

    sig { params(value: T::Enumerable[::Account]).void }
    def accounts=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def build_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::User) }
    def create_user!(*args, &blk); end

    sig { returns(T.nilable(::User)) }
    def reload_user; end

    sig { returns(T.nilable(::User)) }
    def user; end

    sig { params(value: T.nilable(::User)).void }
    def user=(value); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::String)) }
    def access_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def access_token=(value); end

    sig { returns(T::Boolean) }
    def access_token?; end

    sig { returns(T.nilable(::String)) }
    def access_token_before_last_save; end

    sig { returns(T.untyped) }
    def access_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def access_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def access_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def access_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def access_token_changed?; end

    sig { returns(T.nilable(::String)) }
    def access_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def access_token_previous_change; end

    sig { returns(T::Boolean) }
    def access_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def access_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def access_token_was; end

    sig { void }
    def access_token_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def item_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def item_id=(value); end

    sig { returns(T::Boolean) }
    def item_id?; end

    sig { returns(T.nilable(::String)) }
    def item_id_before_last_save; end

    sig { returns(T.untyped) }
    def item_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def item_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def item_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def item_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def item_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def item_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def item_id_previous_change; end

    sig { returns(T::Boolean) }
    def item_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def item_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def item_id_was; end

    sig { void }
    def item_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def link_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def link_token=(value); end

    sig { returns(T::Boolean) }
    def link_token?; end

    sig { returns(T.nilable(::String)) }
    def link_token_before_last_save; end

    sig { returns(T.untyped) }
    def link_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def link_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def link_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def link_token_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def link_token_changed?; end

    sig { returns(T.nilable(::String)) }
    def link_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def link_token_previous_change; end

    sig { returns(T::Boolean) }
    def link_token_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def link_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def link_token_was; end

    sig { void }
    def link_token_will_change!; end

    sig { void }
    def restore_access_token!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_item_id!; end

    sig { void }
    def restore_link_token!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_user_id!; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_access_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_access_token?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_item_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_item_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_link_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_link_token?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_user_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_user_id?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def user_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def user_id=(value); end

    sig { returns(T::Boolean) }
    def user_id?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_before_last_save; end

    sig { returns(T.untyped) }
    def user_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def user_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def user_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def user_id_previous_change; end

    sig { returns(T::Boolean) }
    def user_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def user_id_was; end

    sig { void }
    def user_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_access_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_item_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_link_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_user_id?; end
  end
end