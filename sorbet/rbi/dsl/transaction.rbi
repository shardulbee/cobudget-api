# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Transaction`.
# Please instead update this file by running `bin/tapioca dsl Transaction`.

# typed: strict
class Transaction
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::Account)) }
    def account; end

    sig { params(value: T.nilable(::Account)).void }
    def account=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Account) }
    def build_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Account) }
    def create_account(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Account) }
    def create_account!(*args, &blk); end

    sig { returns(T.nilable(::Account)) }
    def reload_account; end
  end

  module GeneratedAttributeMethods
    sig { returns(::Integer) }
    def account_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def account_id=(value); end

    sig { returns(T::Boolean) }
    def account_id?; end

    sig { returns(T.nilable(::Integer)) }
    def account_id_before_last_save; end

    sig { returns(T.untyped) }
    def account_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def account_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def account_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def account_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def account_id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def account_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def account_id_previous_change; end

    sig { returns(T::Boolean) }
    def account_id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def account_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def account_id_was; end

    sig { void }
    def account_id_will_change!; end

    sig { returns(T.nilable(::Money)) }
    def amount; end

    sig { params(value: T.nilable(::Money)).returns(T.nilable(::Money)) }
    def amount=(value); end

    sig { returns(T::Boolean) }
    def amount?; end

    sig { returns(T.nilable(::Money)) }
    def amount_before_last_save; end

    sig { returns(T.untyped) }
    def amount_before_type_cast; end

    sig { returns(T::Boolean) }
    def amount_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Money), T.nilable(::Money)])) }
    def amount_change; end

    sig { returns(T.nilable([T.nilable(::Money), T.nilable(::Money)])) }
    def amount_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def amount_changed?; end

    sig { returns(T.nilable(::Money)) }
    def amount_in_database; end

    sig { returns(T.nilable([T.nilable(::Money), T.nilable(::Money)])) }
    def amount_previous_change; end

    sig { returns(T::Boolean) }
    def amount_previously_changed?; end

    sig { returns(T.nilable(::Money)) }
    def amount_previously_was; end

    sig { returns(T.nilable(::Money)) }
    def amount_was; end

    sig { void }
    def amount_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def currency; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def currency=(value); end

    sig { returns(T::Boolean) }
    def currency?; end

    sig { returns(T.nilable(::String)) }
    def currency_before_last_save; end

    sig { returns(T.untyped) }
    def currency_before_type_cast; end

    sig { returns(T::Boolean) }
    def currency_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def currency_changed?; end

    sig { returns(T.nilable(::String)) }
    def currency_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def currency_previous_change; end

    sig { returns(T::Boolean) }
    def currency_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def currency_previously_was; end

    sig { returns(T.nilable(::String)) }
    def currency_was; end

    sig { void }
    def currency_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def id_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { returns(T::Boolean) }
    def id_previously_changed?; end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def name=(value); end

    sig { returns(T::Boolean) }
    def name?; end

    sig { returns(T.nilable(::String)) }
    def name_before_last_save; end

    sig { returns(T.untyped) }
    def name_before_type_cast; end

    sig { returns(T::Boolean) }
    def name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def name_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def name_previous_change; end

    sig { returns(T::Boolean) }
    def name_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def name_was; end

    sig { void }
    def name_will_change!; end

    sig { returns(T.nilable(::Date)) }
    def occurred_on; end

    sig { params(value: T.nilable(::Date)).returns(T.nilable(::Date)) }
    def occurred_on=(value); end

    sig { returns(T::Boolean) }
    def occurred_on?; end

    sig { returns(T.nilable(::Date)) }
    def occurred_on_before_last_save; end

    sig { returns(T.untyped) }
    def occurred_on_before_type_cast; end

    sig { returns(T::Boolean) }
    def occurred_on_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def occurred_on_change; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def occurred_on_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def occurred_on_changed?; end

    sig { returns(T.nilable(::Date)) }
    def occurred_on_in_database; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def occurred_on_previous_change; end

    sig { returns(T::Boolean) }
    def occurred_on_previously_changed?; end

    sig { returns(T.nilable(::Date)) }
    def occurred_on_previously_was; end

    sig { returns(T.nilable(::Date)) }
    def occurred_on_was; end

    sig { void }
    def occurred_on_will_change!; end

    sig { returns(T.nilable(::String)) }
    def remote_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def remote_id=(value); end

    sig { returns(T::Boolean) }
    def remote_id?; end

    sig { returns(T.nilable(::String)) }
    def remote_id_before_last_save; end

    sig { returns(T.untyped) }
    def remote_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def remote_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remote_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remote_id_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def remote_id_changed?; end

    sig { returns(T.nilable(::String)) }
    def remote_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def remote_id_previous_change; end

    sig { returns(T::Boolean) }
    def remote_id_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def remote_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def remote_id_was; end

    sig { void }
    def remote_id_will_change!; end

    sig { void }
    def restore_account_id!; end

    sig { void }
    def restore_amount!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_currency!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_name!; end

    sig { void }
    def restore_occurred_on!; end

    sig { void }
    def restore_remote_id!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_account_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_account_id?; end

    sig { returns(T.nilable([T.nilable(::Money), T.nilable(::Money)])) }
    def saved_change_to_amount; end

    sig { returns(T::Boolean) }
    def saved_change_to_amount?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_currency; end

    sig { returns(T::Boolean) }
    def saved_change_to_currency?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_name?; end

    sig { returns(T.nilable([T.nilable(::Date), T.nilable(::Date)])) }
    def saved_change_to_occurred_on; end

    sig { returns(T::Boolean) }
    def saved_change_to_occurred_on?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_remote_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_remote_id?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_account_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_amount?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_currency?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_occurred_on?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_remote_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end
end