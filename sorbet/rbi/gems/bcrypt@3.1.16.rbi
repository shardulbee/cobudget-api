# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `bcrypt` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: strict

module BCrypt; end

class BCrypt::Engine
  class << self
    def autodetect_cost(salt); end
    def calibrate(upper_time_limit_in_ms); end
    def cost; end
    def cost=(cost); end
    def generate_salt(cost = T.unsafe(nil)); end
    def hash_secret(secret, salt, _ = T.unsafe(nil)); end
    def valid_salt?(salt); end
    def valid_secret?(secret); end

    private

    def __bc_crypt(_arg0, _arg1); end
    def __bc_salt(_arg0, _arg1, _arg2); end
  end
end

BCrypt::Engine::DEFAULT_COST = T.let(T.unsafe(nil), Integer)
BCrypt::Engine::MAX_COST = T.let(T.unsafe(nil), Integer)
BCrypt::Engine::MAX_SALT_LENGTH = T.let(T.unsafe(nil), Integer)
BCrypt::Engine::MIN_COST = T.let(T.unsafe(nil), Integer)
class BCrypt::Error < ::StandardError; end
module BCrypt::Errors; end
class BCrypt::Errors::InvalidCost < ::BCrypt::Error; end
class BCrypt::Errors::InvalidHash < ::BCrypt::Error; end
class BCrypt::Errors::InvalidSalt < ::BCrypt::Error; end
class BCrypt::Errors::InvalidSecret < ::BCrypt::Error; end

class BCrypt::Password < ::String
  def initialize(raw_hash); end

  def ==(secret); end
  def checksum; end
  def cost; end
  def is_password?(secret); end
  def salt; end
  def version; end

  private

  def split_hash(h); end
  def valid_hash?(h); end

  class << self
    def create(secret, options = T.unsafe(nil)); end
    def valid_hash?(h); end
  end
end
